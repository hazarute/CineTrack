// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Next-Auth ve Uygulama Modelleri
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Örnek: "file:./dev.db"
}

// Kullanıcı modeli (Next-Auth)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  watchlist     WatchlistItem[]

  @@map("users")
}

// Hesap modeli (Next-Auth)
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Oturum modeli (Next-Auth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Doğrulama Token'ı modeli (Next-Auth)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// İzleme Listesi Öğesi (Özel Modelimiz)
model WatchlistItem {
  id           String   @id @default(cuid())
  tmdbId       Int      @map("tmdb_id")      // TMDB'den gelen benzersiz ID
  title        String                         // Film/Dizi başlığı
  posterPath   String?  @map("poster_path")  // Poster yolu (opsiyonel)
  releaseYear  String?  @map("release_year") // Yayın yılı (opsiyonel)
  mediaType    String   @default("movie")    // "movie" veya "tv"
  createdAt    DateTime @default(now()) @map("created_at")
  
  // İlişkiler
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType]) // Aynı kullanıcı için aynı içerikten sadece bir tane olabilir
  @@map("watchlist_items")
}
